// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: visitor.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addVisitorCount = `-- name: AddVisitorCount :one
UPDATE visitors
SET visitor_count = visitor_count + 1
WHERE visitor_id = $1
RETURNING visitor_id, visitor_name, encoding, image, visits_count, recent_access_at, created_at, updated_at
`

func (q *Queries) AddVisitorCount(ctx context.Context, visitorID uuid.UUID) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, addVisitorCount, visitorID)
	var i Visitor
	err := row.Scan(
		&i.VisitorID,
		&i.VisitorName,
		&i.Encoding,
		&i.Image,
		&i.VisitsCount,
		&i.RecentAccessAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createVisitor = `-- name: CreateVisitor :one
INSERT INTO visitors (
  visitor_id,
  visitor_name,
  encoding,
  image,
  visits_count
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING visitor_id, visitor_name, encoding, image, visits_count, recent_access_at, created_at, updated_at
`

type CreateVisitorParams struct {
	VisitorID   uuid.UUID   `json:"visitor_id"`
	VisitorName string      `json:"visitor_name"`
	Encoding    interface{} `json:"encoding"`
	Image       string      `json:"image"`
	VisitsCount int32       `json:"visits_count"`
}

func (q *Queries) CreateVisitor(ctx context.Context, arg CreateVisitorParams) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, createVisitor,
		arg.VisitorID,
		arg.VisitorName,
		arg.Encoding,
		arg.Image,
		arg.VisitsCount,
	)
	var i Visitor
	err := row.Scan(
		&i.VisitorID,
		&i.VisitorName,
		&i.Encoding,
		&i.Image,
		&i.VisitsCount,
		&i.RecentAccessAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVisitor = `-- name: DeleteVisitor :exec
DELETE FROM visitors
WHERE visitor_id = $1
`

func (q *Queries) DeleteVisitor(ctx context.Context, visitorID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteVisitor, visitorID)
	return err
}

const getVisitor = `-- name: GetVisitor :one
SELECT visitor_id, visitor_name, encoding, image, visits_count, recent_access_at, created_at, updated_at FROM visitors
WHERE visitor_id = $1 LIMIT 1
`

func (q *Queries) GetVisitor(ctx context.Context, visitorID uuid.UUID) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, getVisitor, visitorID)
	var i Visitor
	err := row.Scan(
		&i.VisitorID,
		&i.VisitorName,
		&i.Encoding,
		&i.Image,
		&i.VisitsCount,
		&i.RecentAccessAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listVisitors = `-- name: ListVisitors :many
SELECT visitor_id, visitor_name, encoding, image, visits_count, recent_access_at, created_at, updated_at FROM visitors
ORDER BY visitor_id
LIMIT $1
OFFSET $2
`

type ListVisitorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVisitors(ctx context.Context, arg ListVisitorsParams) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, listVisitors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Visitor{}
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.VisitorID,
			&i.VisitorName,
			&i.Encoding,
			&i.Image,
			&i.VisitsCount,
			&i.RecentAccessAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVisitor = `-- name: UpdateVisitor :one
UPDATE visitors
SET visitor_name = $2
WHERE visitor_id = $1
RETURNING visitor_id, visitor_name, encoding, image, visits_count, recent_access_at, created_at, updated_at
`

type UpdateVisitorParams struct {
	VisitorID   uuid.UUID `json:"visitor_id"`
	VisitorName string    `json:"visitor_name"`
}

func (q *Queries) UpdateVisitor(ctx context.Context, arg UpdateVisitorParams) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, updateVisitor, arg.VisitorID, arg.VisitorName)
	var i Visitor
	err := row.Scan(
		&i.VisitorID,
		&i.VisitorName,
		&i.Encoding,
		&i.Image,
		&i.VisitsCount,
		&i.RecentAccessAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
