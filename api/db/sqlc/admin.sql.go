// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (
  admin_name,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING admin_name, hashed_password, full_name, email, password_changed_at, created_at, changed_user_id, deleted_user_id
`

type CreateAdminParams struct {
	AdminName      string `json:"admin_name"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.AdminName,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i Admin
	err := row.Scan(
		&i.AdminName,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ChangedUserID,
		&i.DeletedUserID,
	)
	return i, err
}

const getAdmin = `-- name: GetAdmin :one
SELECT admin_name, hashed_password, full_name, email, password_changed_at, created_at, changed_user_id, deleted_user_id FROM admins
WHERE admin_name = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, adminName string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, adminName)
	var i Admin
	err := row.Scan(
		&i.AdminName,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ChangedUserID,
		&i.DeletedUserID,
	)
	return i, err
}
