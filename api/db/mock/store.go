// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AISVisioner/greeting-kiosk/api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/AISVisioner/greeting-kiosk/api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddVisitorCount mocks base method.
func (m *MockStore) AddVisitorCount(arg0 context.Context, arg1 uuid.UUID) (db.Visitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVisitorCount", arg0, arg1)
	ret0, _ := ret[0].(db.Visitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVisitorCount indicates an expected call of AddVisitorCount.
func (mr *MockStoreMockRecorder) AddVisitorCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVisitorCount", reflect.TypeOf((*MockStore)(nil).AddVisitorCount), arg0, arg1)
}

// CreateAdmin mocks base method.
func (m *MockStore) CreateAdmin(arg0 context.Context, arg1 db.CreateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockStoreMockRecorder) CreateAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockStore)(nil).CreateAdmin), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateVisitor mocks base method.
func (m *MockStore) CreateVisitor(arg0 context.Context, arg1 db.CreateVisitorParams) (db.Visitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVisitor", arg0, arg1)
	ret0, _ := ret[0].(db.Visitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVisitor indicates an expected call of CreateVisitor.
func (mr *MockStoreMockRecorder) CreateVisitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVisitor", reflect.TypeOf((*MockStore)(nil).CreateVisitor), arg0, arg1)
}

// DeleteVisitor mocks base method.
func (m *MockStore) DeleteVisitor(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVisitor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVisitor indicates an expected call of DeleteVisitor.
func (mr *MockStoreMockRecorder) DeleteVisitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVisitor", reflect.TypeOf((*MockStore)(nil).DeleteVisitor), arg0, arg1)
}

// GetAdmin mocks base method.
func (m *MockStore) GetAdmin(arg0 context.Context, arg1 string) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockStoreMockRecorder) GetAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockStore)(nil).GetAdmin), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetVisitor mocks base method.
func (m *MockStore) GetVisitor(arg0 context.Context, arg1 uuid.UUID) (db.Visitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitor", arg0, arg1)
	ret0, _ := ret[0].(db.Visitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitor indicates an expected call of GetVisitor.
func (mr *MockStoreMockRecorder) GetVisitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitor", reflect.TypeOf((*MockStore)(nil).GetVisitor), arg0, arg1)
}

// ListVisitors mocks base method.
func (m *MockStore) ListVisitors(arg0 context.Context, arg1 db.ListVisitorsParams) ([]db.Visitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVisitors", arg0, arg1)
	ret0, _ := ret[0].([]db.Visitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVisitors indicates an expected call of ListVisitors.
func (mr *MockStoreMockRecorder) ListVisitors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVisitors", reflect.TypeOf((*MockStore)(nil).ListVisitors), arg0, arg1)
}

// UpdateVisitor mocks base method.
func (m *MockStore) UpdateVisitor(arg0 context.Context, arg1 db.UpdateVisitorParams) (db.Visitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVisitor", arg0, arg1)
	ret0, _ := ret[0].(db.Visitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVisitor indicates an expected call of UpdateVisitor.
func (mr *MockStoreMockRecorder) UpdateVisitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVisitor", reflect.TypeOf((*MockStore)(nil).UpdateVisitor), arg0, arg1)
}
